{"version":3,"sources":["Card.js","FreeCell.js","Foundation.js","Cascade.js","GameArea.js","Footer.js","App.js","serviceWorker.js","index.js"],"names":["Card","state","selectCard","_this","props","selectCardFn","objKey","getDisplayValue","value","cardValue","toString","react_default","a","createElement","onClick","this","style","boxSizing","border","selected","textAlign","borderRadius","height","width","padding","color","suit","backgroundColor","marginTop","verticalMargin","position","zIndex","dispIndex","rank","Component","FreeCell","margin","cardMargins","card","selectEmptySquareFn","location","Card_Card","Foundation","_this2","cards","length","key","Cascade","cardHeight","Math","round","paddingTop","paddingLeft","paddingRight","cardWidth","minHeight","map","i","index","maxIndex","suits","GameArea","gameInProgress","cascades","freeCells","foundations","selectedKey","componentDidMount","updateWindowDimensions","window","addEventListener","componentWillUnmount","removeEventListener","setState","innerWidth","innerHeight","generateCards","forEach","shuffleCards","cardKeyArr","push","shuffledKeyArr","random","sort","b","cardsDealtOut","Object","objectSpread","cascadeCol","positionInCascade","floor","cardKey","column","displayCards","cardsCanStack","bottomCardKey","topCardKey","stackType","bottomCard","topCard","getCardColor","console","error","destLocation","locationMatch","match","locationType","checkToStackCardOnFoundation","checkToMoveToFreeCell","tryToMoveToEmptyCascade","destCard","tryToMoveToCascade","moveCard","args","cardToMove","foundationColumnLength","topFoundationCard","lengthOfCascade","topCardInCascade","min","marginLeft","fontSize","display","justifyContent","foundation","Foundation_Foundation","freeCell","FreeCell_FreeCell","cascade","Cascade_Cascade","className","Footer","href","target","rel","App","Fragment","GameArea_GameArea","Boolean","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.74a328c3.chunk.js","sourcesContent":["// card ratio 2.5 x 3.5\r\nimport React, { Component } from \"react\";\r\n\r\nexport default class Card extends Component {\r\n  // todo: convert to stateless function?\r\n  state = {};\r\n\r\n  selectCard = () => {\r\n    this.props.selectCardFn(this.props.objKey);\r\n    // this.setState({ selected: true });\r\n  };\r\n\r\n  getDisplayValue = value => {\r\n    const cardValue = value + 1;\r\n    if (cardValue > 1 && cardValue <= 10) {\r\n      return cardValue.toString();\r\n    }\r\n    switch (cardValue) {\r\n      case 1:\r\n        return \"A\";\r\n      case 11:\r\n        return \"J\";\r\n      case 12:\r\n        return \"Q\";\r\n      case 13:\r\n        return \"K\";\r\n      default:\r\n        return \"E\";\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div\r\n        onClick={this.selectCard}\r\n        style={{\r\n          boxSizing: \"border-box\",\r\n          border: this.props.selected ? \"2px solid red\" : \"1px solid grey\",\r\n          textAlign: \"left\",\r\n          borderRadius: 10,\r\n          height: this.props.height,\r\n          width: this.props.width,\r\n          padding: 5,\r\n          color:\r\n            this.props.suit === \"♥\" || this.props.suit === \"♦\"\r\n              ? \"red\"\r\n              : \"black\",\r\n          backgroundColor: \"white\",\r\n          marginTop: this.props.verticalMargin,\r\n          position: \"relative\", // required for zIndex to function correctly\r\n          zIndex: this.props.dispIndex || 0\r\n        }}\r\n      >\r\n        {this.props.suit}\r\n        {this.getDisplayValue(this.props.rank)}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Card from \"./Card\";\r\n\r\nexport default class FreeCell extends Component {\r\n  // todo: convert to functional component?\r\n\r\n  render() {\r\n    return (\r\n      <div\r\n        style={{\r\n          border: \"1px solid grey\",\r\n          width: this.props.width,\r\n          height: this.props.height,\r\n          backgroundColor: \"cream\",\r\n          margin: this.props.cardMargins / 2\r\n        }}\r\n        onClick={() => {\r\n          if (this.props.card === null) {\r\n            // only activate click function if we have no cards in foundation\r\n            // otherwise, the click would be on the top most card.\r\n            this.props.selectEmptySquareFn(this.props.location);\r\n          }\r\n        }}\r\n      >\r\n        {this.props.card !== null ? (\r\n          <Card\r\n            suit={this.props.card.suit}\r\n            rank={this.props.card.rank}\r\n            height={this.props.height}\r\n            width={this.props.width}\r\n            selected={this.props.card.selected}\r\n            selectCardFn={this.props.selectCardFn}\r\n            objKey={this.props.card.rank + this.props.card.suit}\r\n          />\r\n        ) : null}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Card from \"./Card\";\r\n\r\nexport default class Foundation extends Component {\r\n  // todo: convert to functional component?\r\n  state = {};\r\n\r\n  render() {\r\n    return (\r\n      <div\r\n        style={{\r\n          border: \"1px solid grey\",\r\n          width: this.props.width,\r\n          height: this.props.height,\r\n          backgroundColor: \"cream\",\r\n          margin: this.props.cardMargins / 2\r\n        }}\r\n        onClick={() => {\r\n          if (!this.props.cards.length) {\r\n            // only activate click function if we have no cards in foundation\r\n            // otherwise, the click would be on the top most card.\r\n            this.props.selectEmptySquareFn(this.props.location);\r\n          }\r\n        }}\r\n      >\r\n        {this.props.cards && this.props.cards.length ? (\r\n          <Card\r\n            suit={this.props.cards[this.props.cards.length - 1].suit}\r\n            rank={this.props.cards[this.props.cards.length - 1].rank}\r\n            height={this.props.height}\r\n            width={this.props.width}\r\n            selected={this.props.cards[this.props.cards.length - 1].selected}\r\n            selectCardFn={this.props.selectCardFn}\r\n            // no key needed here since we aren't rendering a list?\r\n            key={\r\n              this.props.cards[this.props.cards.length - 1].rank +\r\n              this.props.cards[this.props.cards.length - 1].suit\r\n            }\r\n            objKey={\r\n              this.props.cards[this.props.cards.length - 1].rank +\r\n              this.props.cards[this.props.cards.length - 1].suit\r\n            }\r\n          />\r\n        ) : null}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Card from \"./Card\";\r\n\r\n// const cardWidth = 100;\r\n// const cardHeight = Math.round(1.4 * cardWidth);\r\n// todo: convert to stateless function?\r\nexport default class Cascade extends Component {\r\n  render() {\r\n    const cardVisibleRatio = 0.33;\r\n    const verticalMargin =\r\n      -this.props.cardHeight +\r\n      Math.round(cardVisibleRatio * this.props.cardHeight);\r\n    return (\r\n      <div\r\n        style={{\r\n          paddingTop: -verticalMargin,\r\n          // paddingLeft: Math.round(this.props.cardMargins / 2),\r\n          // paddingRight: Math.round(this.props.cardMargins / 2),\r\n          paddingLeft: this.props.cardMargins / 2, // todo: vary this with screen height\r\n          paddingRight: this.props.cardMargins / 2,\r\n          border: \"1px solid grey\",\r\n          width: this.props.cardWidth,\r\n          minHeight: this.props.cardHeight\r\n          // height: this.props.height,\r\n          // margin: 10\r\n        }}\r\n        onClick={() => {\r\n          if (!this.props.cards.length) {\r\n            // only activate click function if we have no cards in foundation\r\n            // otherwise, the click would be on the top most card.\r\n            this.props.selectEmptySquareFn(this.props.location);\r\n          }\r\n        }}\r\n      >\r\n        {this.props.cards && this.props.cards.length\r\n          ? this.props.cards.map((card, i) => {\r\n              return (\r\n                <Card\r\n                  rank={card.rank}\r\n                  suit={card.suit}\r\n                  height={this.props.cardHeight}\r\n                  width={this.props.cardWidth}\r\n                  verticalMargin={verticalMargin}\r\n                  selectCardFn={this.props.selectCardFn}\r\n                  selected={card.selected}\r\n                  key={card.rank + card.suit}\r\n                  location={this.props.location}\r\n                  index={i}\r\n                  objKey={card.rank + card.suit}\r\n                  maxIndex={this.props.cards.length - 1}\r\n                  dispIndex={i}\r\n                />\r\n              );\r\n            })\r\n          : null}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport FreeCell from \"./FreeCell\";\r\nimport Foundation from \"./Foundation\";\r\nimport Cascade from \"./Cascade\";\r\n\r\nconst suits = [\"♣\", \"♦\", \"♥\", \"♠\"];\r\n\r\nexport default class GameArea extends Component {\r\n  state = {\r\n    cards: {},\r\n    gameInProgress: false,\r\n    cascades: [[], [], [], [], [], [], [], []],\r\n    freeCells: [null, null, null, null],\r\n    foundations: [[], [], [], []],\r\n    selectedKey: null,\r\n    width: 0,\r\n    height: 0\r\n  };\r\n\r\n  componentDidMount = () => {\r\n    this.updateWindowDimensions();\r\n    window.addEventListener(\"resize\", this.updateWindowDimensions);\r\n  };\r\n\r\n  componentWillUnmount = () => {\r\n    window.removeEventListener(\"resize\", this.updateWindowDimensions);\r\n  };\r\n\r\n  updateWindowDimensions = () => {\r\n    this.setState({ width: window.innerWidth, height: window.innerHeight });\r\n  };\r\n\r\n  generateCards = () => {\r\n    const cards = {};\r\n    suits.forEach(suit => {\r\n      for (let i = 0; i <= 12; i++) {\r\n        cards[i + suit] = {\r\n          suit: suit,\r\n          rank: i,\r\n          location: null,\r\n          selected: false,\r\n          objKey: i + suit\r\n        };\r\n      }\r\n    });\r\n    this.setState({ cards }, () => {\r\n      // once cards are generated, shuffle them:\r\n      this.shuffleCards();\r\n    });\r\n  };\r\n\r\n  shuffleCards = () => {\r\n    const cardKeyArr = [];\r\n    suits.forEach(suit => {\r\n      for (let i = 0; i <= 12; i++) {\r\n        cardKeyArr.push({ suit, rank: i });\r\n      }\r\n    });\r\n    const shuffledKeyArr = cardKeyArr\r\n      .map(a => [Math.random(), a])\r\n      .sort((a, b) => a[0] - b[0])\r\n      .map(a => a[1]);\r\n    const cardsDealtOut = { ...this.state.cards }; // there's mutation here b/c obj of objs, but shouldn't matter\r\n    shuffledKeyArr.forEach((card, i) => {\r\n      const cascadeCol = i % 8; // 0 - 7\r\n      const positionInCascade = Math.floor(i / 8);\r\n      const cardKey = card.rank + card.suit;\r\n      cardsDealtOut[cardKey].location = \"cascade\";\r\n      cardsDealtOut[cardKey].column = cascadeCol;\r\n      cardsDealtOut[cardKey].position = positionInCascade;\r\n    });\r\n    this.setState({ cards: cardsDealtOut }, () => {\r\n      this.displayCards();\r\n    });\r\n  };\r\n\r\n  cardsCanStack = (bottomCardKey, topCardKey, stackType) => {\r\n    // currently unused, would like to integrate into select/move function\r\n    const bottomCard = this.state.cards[bottomCardKey];\r\n    const topCard = this.state.cards[topCardKey];\r\n    if (stackType === \"cascade\") {\r\n      // in a cascade stack, color must be opposite, and rank of top card must be 1 lower than bottom card\r\n      if (topCard.rank - 1 !== bottomCard.rank) return false;\r\n      if (this.getCardColor(topCard) === this.getCardColor(bottomCard))\r\n        return false;\r\n      return true;\r\n    } else if (stackType === \"foundation\") {\r\n      // in a foundation stack, suit must match, and rank of top card must be 1 greater than bottom card\r\n      if (topCard.suit !== bottomCard.suit) return false;\r\n      if (topCard.rank + 1 !== bottomCard.rank) return false;\r\n      return true;\r\n    } else {\r\n      console.error(\r\n        \"GameArea.jsx -> cardsCanStack function: incorrect stack type specified\"\r\n      );\r\n      return false;\r\n    }\r\n  };\r\n\r\n  displayCards = () => {\r\n    const cards = { ...this.state.cards };\r\n    const cascades = [[], [], [], [], [], [], [], []];\r\n    const foundations = [[], [], [], []];\r\n    const freeCells = [null, null, null, null];\r\n    for (const key in cards) {\r\n      if (cards[key].location === \"cascade\") {\r\n        cascades[cards[key].column][cards[key].position] = cards[key];\r\n      } else if (cards[key].location === \"foundation\") {\r\n        foundations[cards[key].column][cards[key].position] = cards[key];\r\n        // foundations[cards[key].column].push(cards[key]);\r\n      } else if (cards[key].location === \"freeCell\") {\r\n        freeCells[cards[key].column] = cards[key];\r\n        // there can be only 1 per cell, so no array here\r\n      }\r\n    }\r\n    this.setState({\r\n      cards,\r\n      cascades,\r\n      foundations,\r\n      freeCells,\r\n      selectedKey: null\r\n    });\r\n  };\r\n\r\n  selectEmptySquareFn = destLocation => {\r\n    const cardKey = this.state.selectedKey; // key of card to potentially move\r\n    // if no card previously selected, ignore click;\r\n    if (!cardKey) return;\r\n    const locationMatch = destLocation.match(/(\\w+)(\\d+)/);\r\n    const locationType = locationMatch[1];\r\n    const column = locationMatch[2];\r\n    // ok, so now we check to move the card here.\r\n    if (locationType === \"foundation\") {\r\n      this.checkToStackCardOnFoundation({\r\n        cardKey,\r\n        column\r\n      });\r\n    } else if (locationType === \"freeCell\") {\r\n      this.checkToMoveToFreeCell({ cardKey, column });\r\n    } else if (locationType === \"cascade\") {\r\n      this.tryToMoveToEmptyCascade({ cardKey, column });\r\n    }\r\n  };\r\n\r\n  selectCardFn = cardKey => {\r\n    const cards = { ...this.state.cards };\r\n    if (this.state.selectedKey && this.state.selectedKey === cardKey) {\r\n      // if we already had a selected card and we click the same one again, unselect it and return\r\n      cards[cardKey].selected = false;\r\n      this.setState({ cards, selectedKey: null });\r\n      return;\r\n    }\r\n    if (!this.state.selectedKey) {\r\n      // no previously selected key, just select this one and return\r\n      cards[cardKey].selected = true;\r\n      this.setState({ cards, selectedKey: cardKey });\r\n      return;\r\n    }\r\n    // otherwise, handle attempted move:\r\n    // determine where we're trying to move the card\r\n    const destCard = this.state.cards[cardKey];\r\n    if (destCard.location === \"foundation\") {\r\n      // if move is to a foundation, check if checkToStackCardOnFoundation is true;\r\n      this.checkToStackCardOnFoundation({\r\n        cardKey: this.state.selectedKey,\r\n        column: destCard.column\r\n      });\r\n      return;\r\n    } else if (destCard.location === \"cascade\") {\r\n      this.tryToMoveToCascade({\r\n        cardKey: this.state.selectedKey,\r\n        column: destCard.column\r\n      });\r\n    }\r\n  };\r\n\r\n  moveCard = args => {\r\n    const { cardKey, location, column, position } = args;\r\n    const cards = { ...this.state.cards };\r\n    const card = cards[cardKey];\r\n    card.location = location;\r\n    card.column = column;\r\n    card.position = position;\r\n    card.selected = false;\r\n    cards[this.state.selectedKey].selected = null;\r\n    this.setState({ cards, selectedKey: null }, () => {\r\n      this.displayCards();\r\n    });\r\n  };\r\n\r\n  checkToMoveToFreeCell = args => {\r\n    const { cardKey, column } = args;\r\n    const freeCell = this.state.freeCells[column];\r\n    if (freeCell) {\r\n      console.error(\r\n        \"Attempted to move to non-empty freeCell which should not be possible.\"\r\n      );\r\n      return;\r\n    }\r\n    this.moveCard({ cardKey, location: \"freeCell\", column, position: 0 });\r\n  };\r\n\r\n  checkToStackCardOnFoundation = args => {\r\n    const { cardKey, column } = args;\r\n    const cards = { ...this.state.cards };\r\n    const cardToMove = cards[cardKey];\r\n    if (this.state.foundations[column].length === 0) {\r\n      // if foundation is empty, the card we're moving has to be an Ace:\r\n      if (cardToMove.rank !== 0) return false;\r\n    } else {\r\n      // if suit matches last card on the stack, and rank is 1 greater than last card on the stack, move is legal\r\n      const foundationColumnLength = this.state.foundations[column].length;\r\n      const topFoundationCard = this.state.foundations[column][\r\n        foundationColumnLength - 1\r\n      ];\r\n      if (cardToMove.suit !== topFoundationCard.suit) return false;\r\n      if (cardToMove.rank - 1 !== topFoundationCard.rank) return false;\r\n    }\r\n    this.moveCard({\r\n      cardKey,\r\n      location: \"foundation\",\r\n      column,\r\n      position: cards[cardKey].rank\r\n    });\r\n  };\r\n\r\n  tryToMoveToEmptyCascade = args => {\r\n    const { cardKey, column } = args;\r\n    const cascadeLength = this.state.cascades[column].length;\r\n    if (cascadeLength > 0) {\r\n      console.error(\r\n        \"Attempted to move to non-empty cascade, which should not be possible\"\r\n      );\r\n      return;\r\n    }\r\n    this.moveCard({\r\n      cardKey,\r\n      location: \"cascade\",\r\n      column,\r\n      position: 0\r\n    });\r\n  };\r\n\r\n  tryToMoveToCascade = args => {\r\n    const { cardKey, column } = args;\r\n    const cards = { ...this.state.cards };\r\n    const cardToMove = cards[cardKey];\r\n    const lengthOfCascade = this.state.cascades[column].length;\r\n    const topCardInCascade = this.state.cascades[column][lengthOfCascade - 1];\r\n    // if colors are the same, return;\r\n    if (this.getCardColor(cardToMove) === this.getCardColor(topCardInCascade))\r\n      return;\r\n    // if the rank of the card to move isn't 1 less than the top card in cascade, return:\r\n    if (cardToMove.rank + 1 !== topCardInCascade.rank) return;\r\n    this.moveCard({\r\n      cardKey,\r\n      location: \"cascade\",\r\n      column,\r\n      position: topCardInCascade.position + 1\r\n    });\r\n  };\r\n\r\n  getCardColor = card => {\r\n    if (card.suit === \"♦\" || card.suit === \"♥\") return \"red\";\r\n    return \"black\";\r\n  };\r\n\r\n  render() {\r\n    const cardWidth = Math.min(\r\n      Math.round(this.state.width / 12),\r\n      Math.round(this.state.height / 12)\r\n    );\r\n    const cardHeight = Math.round(1.4 * cardWidth);\r\n    const cardMargins = Math.round(this.state.width * 0.02);\r\n    return (\r\n      <div style={{ textAlign: \"center\" }}>\r\n        <button style={{ marginLeft: 20 }} onClick={this.generateCards}>\r\n          New Game\r\n        </button>\r\n        <span style={{ fontSize: \"0.7em\" }}>\r\n          {\" \"}\r\n          (Warning - this will end your current game.)\r\n        </span>\r\n        <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n          <div style={{ margin: cardMargins }}>\r\n            <h4 style={{ textAlign: \"center\" }}>Foundations</h4>\r\n            <div style={{ display: \"flex\" }}>\r\n              {this.state.foundations.map((foundation, i) => (\r\n                <Foundation\r\n                  height={cardHeight}\r\n                  width={cardWidth}\r\n                  key={\"foundation\" + i}\r\n                  location={\"foundation\" + i}\r\n                  selectCardFn={this.selectCardFn}\r\n                  selectEmptySquareFn={this.selectEmptySquareFn}\r\n                  cards={foundation}\r\n                  cardMargins={cardMargins}\r\n                />\r\n              ))}\r\n            </div>\r\n          </div>\r\n          <div style={{ margin: cardMargins }}>\r\n            <h4 style={{ textAlign: \"center\" }}>FreeCells</h4>\r\n            <div style={{ display: \"flex\" }}>\r\n              {this.state.freeCells.map((freeCell, i) => (\r\n                <FreeCell\r\n                  width={cardWidth}\r\n                  height={cardHeight}\r\n                  key={\"freeCell\" + i}\r\n                  location={\"freeCell\" + i}\r\n                  selectCardFn={this.selectCardFn}\r\n                  selectEmptySquareFn={this.selectEmptySquareFn}\r\n                  card={freeCell}\r\n                  cardMargins={cardMargins}\r\n                />\r\n              ))}\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n          {this.state.cascades.map((cascade, i) => (\r\n            <Cascade\r\n              className=\"Cascade\"\r\n              cards={cascade}\r\n              cardWidth={cardWidth}\r\n              cardHeight={cardHeight}\r\n              selectCardFn={this.selectCardFn}\r\n              selectEmptySquareFn={this.selectEmptySquareFn}\r\n              key={\"cascade\" + i}\r\n              location={\"cascade\" + i}\r\n              cardMargins={cardMargins}\r\n            />\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function Footer() {\r\n  return (\r\n    <div style={{ marginTop: 25, textAlign: \"center\" }}>\r\n      <p style={{ fontSize: \"0.6em\" }}>\r\n        Note: Cheating is currently possible (selecting underlying cells within\r\n        cascades) to allow easier testing. It will be disabled shortly.\r\n      </p>\r\n      <a\r\n        href=\"https://github.com/scotteratigan/reactcell/\"\r\n        target=\"_blank\"\r\n        rel=\"noopener noreferrer\"\r\n      >\r\n        Source Code\r\n      </a>{\" \"}\r\n      |{\" \"}\r\n      <a\r\n        href=\"https://scotteratigan.github.io/\"\r\n        target=\"_blank\"\r\n        rel=\"noopener noreferrer\"\r\n      >\r\n        My Portfolio\r\n      </a>{\" \"}\r\n      |{\" \"}\r\n      <a\r\n        href=\"https://www.linkedin.com/in/scotteratigan/\"\r\n        target=\"_blank\"\r\n        rel=\"noopener noreferrer\"\r\n      >\r\n        LinkedIn\r\n      </a>\r\n    </div>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\n// import { BrowserRouter as Router, Route } from \"react-router-dom\";\n// import \"./App.css\";\nimport GameArea from \"./GameArea\";\nimport Footer from \"./Footer\";\n\nclass App extends Component {\n  render() {\n    return (\n      // <Router>\n      <>\n        <div style={{ marginTop: 20, textAlign: \"center\" }}>\n          <h1>\n            <em>React</em>Cell\n          </h1>\n          <h4>A FreeCell clone by Scott Ratigan</h4>\n        </div>\n        {/* <Route exact path=\"/\" component={GameArea} /> */}\n        <GameArea />\n        <Footer />\n      </>\n      // </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}